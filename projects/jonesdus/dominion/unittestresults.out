TESTING whoseTurn():
whoseTurn() returns correct value [0] after initialization: PASSED
whoseTurn() returns correct value [1] after the end of a turn: PASSED
whoseTurn() returns arbitrary turn value [100]: PASSED
whoseTurn() PASSED 3 out of 3 tests

TESTING isGameOver():
isGameOver() returns correct value [0] after initialization: PASSED
isGameOver() returns correct value [1] when province stack empty: PASSED
isGameOver() returns correct value [0] when province available and one supply stack empty: PASSED
isGameOver() returns correct value [0] when province available and two supply stacks empty: PASSED
isGameOver() returns correct value [1] when province available and three supply stacks empty: PASSED
isGameOver() returns correct value [1] when province not available and three supply stacks empty: PASSED
isGameOver() PASSED 6 out of 6 tests

TESTING isGameOver():
supplyCount() returns correct value for province stack [12] after initialization: PASSED
supplyCount() returns correct value for province stack [0] after initialization: PASSED
supplyCount() returns correct value for duchy stack [12] after initialization: PASSED
supplyCount() PASSED 3 out of 3 tests

File 'dominion.c'
Lines executed:21.60% of 648
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      168:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      168:   11:  if (*(int*)a < *(int*)b)
       60:   12:    return -1;
      108:   13:  return 0;
      168:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      570:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      300:   65:        }
       30:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
        3:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
        3:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
        3:   95:      state->supplyCount[estate] = 12;
        3:   96:      state->supplyCount[duchy] = 12;
        3:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        3:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
        3:  118:		  else{ state->supplyCount[i] = 12; }
        3:  119:		}
        -:  120:	      else
        -:  121:		{
       27:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      435:  130:	}
        -:  131:
       60:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
       36:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
       84:  150:	}
       12:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       12:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       12:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
       81:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
       15:  193:    drawCard(state->whoseTurn, state);
       15:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        3:  198:  return 0;
        3:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      264:  214:  while (state->deckCount[player] > 0) {
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      750:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      255:  219:      state->deck[player][i] = state->deck[player][i+1];
      255:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      264:  223:  for (i = 0; i < newDeckPos; i++) {
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
      120:  226:  }
        -:  227:
       12:  228:  return 0;
       12:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        1:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       12:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        5:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        5:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        5:  359:  }
        1:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        1:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        1:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        1:  370:  state->outpostPlayed = 0;
        1:  371:  state->phase = 0;
        1:  372:  state->numActions = 1;
        1:  373:  state->coins = 0;
        1:  374:  state->numBuys = 1;
        1:  375:  state->playedCardCount = 0;
        1:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       12:  380:  for (k = 0; k < 5; k++){
        5:  381:    drawCard(state->whoseTurn, state);//Draw a card
        5:  382:  }
        -:  383:
        -:  384:  //Update money
        1:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        1:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        6:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        6:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shuffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       20:  580:  return 0;
       20:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646://REFACTORED functions from cardEffect
        -:  647:int smithyEffect(int currentPlayer, struct gameState* state, int handPos, int i) {
        -:  648:     //+3 Cards
    #####:  649:      for (i = 0; i < 4; i++) {
    #####:  650:          drawCard(currentPlayer, state);
    #####:  651:      }
        -:  652:			
        -:  653:    //discard card from hand
    #####:  654:    discardCard(handPos, currentPlayer, state, 0);
    #####:  655:    return 0;
        -:  656:}
        -:  657:
        -:  658:int adventurerEffect(struct gameState* state, int currentPlayer, int cardDrawn, int drawntreasure, int temphand [], int z) {
    #####:  659:  while(drawntreasure<2){
    #####:  660:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  661:      shuffle(currentPlayer, state);
    #####:  662:    }
    #####:  663:    drawCard(currentPlayer, state);
    #####:  664:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  665:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  666:      drawntreasure+=2;
        -:  667:    else{
    #####:  668:      temphand[z]=cardDrawn;
    #####:  669:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  670:      z++;
        -:  671:	  }
        -:  672:  }
        -:  673:
    #####:  674:  while(z-1>=0){
    #####:  675:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  676:    z=z-1;
        -:  677:  }
        -:  678:  
    #####:  679:  return 0;
        -:  680:}
        -:  681:
        -:  682:int cutpurseEffect(int currentPlayer, struct gameState* state, int handPos, int i, int j, int k) {
    #####:  683:  updateCoins(currentPlayer, state, 2);
    #####:  684:  for (i = 0; i < state->numPlayers; i++) {
    #####:  685:	  if (i != currentPlayer) {
    #####:  686:      for (j = 0; j < state->handCount[i]; j++) {
    #####:  687:        if (state->hand[i][j] == gold) {
    #####:  688:          discardCard(j, i, state, 0);
    #####:  689:          break;
        -:  690:        }
        -:  691:
    #####:  692:        if (j == state->handCount[i]) {
    #####:  693:            for (k = 0; k < state->handCount[i]; k++) {
        -:  694:              if (DEBUG)
        -:  695:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  696:            }	
    #####:  697:            break;
        -:  698:        }		
    #####:  699:      }		
    #####:  700:	  }		
    #####:  701:	}				
        -:  702:
        -:  703:  //discard played card from hand
    #####:  704:  discardCard(handPos, currentPlayer, state, 0);			
        -:  705:
    #####:  706:  return 0;
        -:  707:}
        -:  708:
        -:  709:int embargoEffect(int currentPlayer, struct gameState* state, int handPos, int choice1) {
        -:  710:  //+2 Coins
    #####:  711:  state->coins = state->coins + 2;
        -:  712:			
        -:  713:  //see if selected pile is in play
    #####:  714:  if ( state->supplyCount[choice1] == -1 ) {
    #####:  715:	  return -1;
        -:  716:	}
        -:  717:			
        -:  718:  //add embargo token to selected supply pile
    #####:  719:  state->embargoTokens[choice1] = 0;
        -:  720:  
        -:  721:  //trash card
    #####:  722:  discardCard(handPos, currentPlayer, state, 1);		
    #####:  723:  return 0;
    #####:  724:}
        -:  725:
        -:  726:int baronEffect(int currentPlayer, struct gameState* state, int choice1) {
    #####:  727:  state->numBuys++;//Increase buys by 1!
        -:  728:
    #####:  729:  if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  730:    int p = 0;//Iterator for hand!
    #####:  731:    int card_not_discarded = 1;//Flag for discard set!
    #####:  732:    while(card_not_discarded){
    #####:  733:      if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  734:        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  735:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  736:        state->discardCount[currentPlayer]++;
        -:  737:
    #####:  738:        for(; p < state->handCount[currentPlayer]; p++) {
    #####:  739:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  740:        }
        -:  741:
    #####:  742:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  743:        state->handCount[currentPlayer]--;
    #####:  744:        card_not_discarded = 0;//Exit the loop
    #####:  745:      } else if(p > state->handCount[currentPlayer]) {
        -:  746:          if(DEBUG) {
        -:  747:            printf("No estate cards in your hand, invalid choice\n");
        -:  748:            printf("Must gain an estate if there are any\n");
        -:  749:          }
        -:  750:
    #####:  751:          if (supplyCount(estate, state) > 0){
    #####:  752:            gainCard(estate, state, 0, currentPlayer);
    #####:  753:            state->supplyCount[estate]--;//Decrement estates
    #####:  754:            if (supplyCount(estate, state) == 0){
    #####:  755:              isGameOver(state);
    #####:  756:            }
    #####:  757:          }
        -:  758:
    #####:  759:          card_not_discarded = 0;//Exit the loop
    #####:  760:      } else {
    #####:  761:          p++;//Next card
        -:  762:      }
        -:  763:	  }
    #####:  764:  } else {
    #####:  765:      if(supplyCount(estate, state) > 0) {
    #####:  766:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  767:        state->supplyCount[estate]--;//Decrement Estates
        -:  768:
    #####:  769:        if (supplyCount(estate, state) == 0){
    #####:  770:          isGameOver(state);
    #####:  771:        }
    #####:  772:      }
        -:  773:  }
        -:  774:	    
    #####:  775:  return 0;
        -:  776:}
        -:  777:
        -:  778://////////////////////////////////////
        -:  779:
        -:  780:
        -:  781:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  782:{
    #####:  783:  int i = 0;
    #####:  784:  int j = 0;
    #####:  785:  int k = 0;
        -:  786:  int x;
        -:  787:  int index;
    #####:  788:  int currentPlayer = whoseTurn(state);
    #####:  789:  int nextPlayer = currentPlayer + 1;
        -:  790:
    #####:  791:  int tributeRevealedCards[2] = {-1, -1};
        -:  792:  int temphand[MAX_HAND];// moved above the if statement
    #####:  793:  int drawntreasure=0;
    #####:  794:  int cardDrawn = 0;
    #####:  795:  int z = 0;// this is the counter for the temp hand
    #####:  796:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  797:    nextPlayer = 0;
    #####:  798:  }
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
    #####:  801:  switch( card ) 
        -:  802:    {
        -:  803:    case adventurer:
    #####:  804:      adventurerEffect(state, currentPlayer, cardDrawn, drawntreasure, temphand, z);
        -:  805:			
        -:  806:    case council_room:
        -:  807:      //+4 Cards
    #####:  808:      for (i = 0; i < 4; i++)
        -:  809:	{
    #####:  810:	  drawCard(currentPlayer, state);
    #####:  811:	}
        -:  812:			
        -:  813:      //+1 Buy
    #####:  814:      state->numBuys++;
        -:  815:			
        -:  816:      //Each other player draws a card
    #####:  817:      for (i = 0; i < state->numPlayers; i++)
        -:  818:	{
    #####:  819:	  if ( i != currentPlayer )
        -:  820:	    {
    #####:  821:	      drawCard(i, state);
    #####:  822:	    }
    #####:  823:	}
        -:  824:			
        -:  825:      //put played card in played card pile
    #####:  826:      discardCard(handPos, currentPlayer, state, 0);
        -:  827:			
    #####:  828:      return 0;
        -:  829:			
        -:  830:    case feast:
        -:  831:      //gain card with cost up to 5
        -:  832:      //Backup hand
    #####:  833:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  834:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  835:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  836:      }
        -:  837:      //Backup hand
        -:  838:
        -:  839:      //Update Coins for Buy
    #####:  840:      updateCoins(currentPlayer, state, 5);
    #####:  841:      x = 1;//Condition to loop on
    #####:  842:      while( x == 1) {//Buy one card
    #####:  843:	if (supplyCount(choice1, state) <= 0){
        -:  844:	  if (DEBUG)
        -:  845:	    printf("None of that card left, sorry!\n");
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  849:	  }
    #####:  850:	}
    #####:  851:	else if (state->coins < getCost(choice1)){
    #####:  852:	  printf("That card is too expensive!\n");
        -:  853:
        -:  854:	  if (DEBUG){
        -:  855:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  856:	  }
    #####:  857:	}
        -:  858:	else{
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  862:	  }
        -:  863:
    #####:  864:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  865:	  x = 0;//No more buying cards
        -:  866:
        -:  867:	  if (DEBUG){
        -:  868:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  869:	  }
        -:  870:
        -:  871:	}
        -:  872:      }     
        -:  873:
        -:  874:      //Reset Hand
    #####:  875:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  876:	state->hand[currentPlayer][i] = temphand[i];
    #####:  877:	temphand[i] = -1;
    #####:  878:      }
        -:  879:      //Reset Hand
        -:  880:      			
    #####:  881:      return 0;
        -:  882:			
        -:  883:    case gardens:
    #####:  884:      return -1;
        -:  885:			
        -:  886:    case mine:
    #####:  887:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  888:
    #####:  889:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  890:	{
    #####:  891:	  return -1;
        -:  892:	}
        -:  893:		
    #####:  894:      if (choice2 > treasure_map || choice2 < curse)
        -:  895:	{
    #####:  896:	  return -1;
        -:  897:	}
        -:  898:
    #####:  899:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      gainCard(choice2, state, 2, currentPlayer);
        -:  905:
        -:  906:      //discard card from hand
    #####:  907:      discardCard(handPos, currentPlayer, state, 0);
        -:  908:
        -:  909:      //discard trashed card
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  911:	{
    #####:  912:	  if (state->hand[currentPlayer][i] == j)
        -:  913:	    {
    #####:  914:	      discardCard(i, currentPlayer, state, 0);			
    #####:  915:	      break;
        -:  916:	    }
    #####:  917:	}
        -:  918:			
    #####:  919:      return 0;
        -:  920:			
        -:  921:    case remodel:
    #####:  922:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  923:
    #####:  924:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      gainCard(choice2, state, 0, currentPlayer);
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
        -:  933:
        -:  934:      //discard trashed card
    #####:  935:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  936:	{
    #####:  937:	  if (state->hand[currentPlayer][i] == j)
        -:  938:	    {
    #####:  939:	      discardCard(i, currentPlayer, state, 0);			
    #####:  940:	      break;
        -:  941:	    }
    #####:  942:	}
        -:  943:
        -:  944:
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case smithy:
    #####:  948:      smithyEffect(currentPlayer, state, handPos, i);
        -:  949:		
        -:  950:    case village:
        -:  951:      //+1 Card
    #####:  952:      drawCard(currentPlayer, state);
        -:  953:			
        -:  954:      //+2 Actions
    #####:  955:      state->numActions = state->numActions + 2;
        -:  956:			
        -:  957:      //discard played card from hand
    #####:  958:      discardCard(handPos, currentPlayer, state, 0);
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case baron:
    #####:  962:      baronEffect(currentPlayer, state, choice1); 
        -:  963:		
        -:  964:    case great_hall:
        -:  965:      //+1 Card
    #####:  966:      drawCard(currentPlayer, state);
        -:  967:			
        -:  968:      //+1 Actions
    #####:  969:      state->numActions++;
        -:  970:			
        -:  971:      //discard card from hand
    #####:  972:      discardCard(handPos, currentPlayer, state, 0);
    #####:  973:      return 0;
        -:  974:		
        -:  975:    case minion:
        -:  976:      //+1 action
    #####:  977:      state->numActions++;
        -:  978:			
        -:  979:      //discard card from hand
    #####:  980:      discardCard(handPos, currentPlayer, state, 0);
        -:  981:			
    #####:  982:      if (choice1)		//+2 coins
        -:  983:	{
    #####:  984:	  state->coins = state->coins + 2;
    #####:  985:	}
        -:  986:			
    #####:  987:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  988:	{
        -:  989:	  //discard hand
    #####:  990:	  while(numHandCards(state) > 0)
        -:  991:	    {
    #####:  992:	      discardCard(handPos, currentPlayer, state, 0);
        -:  993:	    }
        -:  994:				
        -:  995:	  //draw 4
    #####:  996:	  for (i = 0; i < 4; i++)
        -:  997:	    {
    #####:  998:	      drawCard(currentPlayer, state);
    #####:  999:	    }
        -: 1000:				
        -: 1001:	  //other players discard hand and redraw if hand size > 4
    #####: 1002:	  for (i = 0; i < state->numPlayers; i++)
        -: 1003:	    {
    #####: 1004:	      if (i != currentPlayer)
        -: 1005:		{
    #####: 1006:		  if ( state->handCount[i] > 4 )
        -: 1007:		    {
        -: 1008:		      //discard hand
    #####: 1009:		      while( state->handCount[i] > 0 )
        -: 1010:			{
    #####: 1011:			  discardCard(handPos, i, state, 0);
        -: 1012:			}
        -: 1013:							
        -: 1014:		      //draw 4
    #####: 1015:		      for (j = 0; j < 4; j++)
        -: 1016:			{
    #####: 1017:			  drawCard(i, state);
    #####: 1018:			}
    #####: 1019:		    }
    #####: 1020:		}
    #####: 1021:	    }
        -: 1022:				
    #####: 1023:	}
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
    #####: 1031:	  drawCard(currentPlayer, state);
    #####: 1032:	}
    #####: 1033:      else if (choice1 == 2)
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
    #####: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1047:      return 0;
        -: 1048:		
        -: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
    #####: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
    #####: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
    #####: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
    #####: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
    #####: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1094:	  state->coins += 2;
    #####: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1098:	  drawCard(currentPlayer, state);
    #####: 1099:	  drawCard(currentPlayer, state);
    #####: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
    #####: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1124:	    {
    #####: 1125:	      j++;
    #####: 1126:	    }
    #####: 1127:	}
    #####: 1128:      if (j < choice2)
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1145:	    }
    #####: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
    #####: 1159:		  break;
        -: 1160:		}
    #####: 1161:	    }
    #####: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case cutpurse:
    #####: 1167:      cutpurseEffect(currentPlayer, state, handPos, i, j, k);
        -: 1168:
        -: 1169:    case embargo: 
    #####: 1170:      embargoEffect(currentPlayer, state, handPos, choice1);
        -: 1171:		
        -: 1172:    case outpost:
        -: 1173:      //set outpost flag
    #####: 1174:      state->outpostPlayed++;
        -: 1175:			
        -: 1176:      //discard card
    #####: 1177:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1178:      return 0;
        -: 1179:		
        -: 1180:    case salvager:
        -: 1181:      //+1 buy
    #####: 1182:      state->numBuys++;
        -: 1183:			
    #####: 1184:      if (choice1)
        -: 1185:	{
        -: 1186:	  //gain coins equal to trashed card
    #####: 1187:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1188:	  //trash card
    #####: 1189:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1190:	}
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case sea_hag:
    #####: 1197:      for (i = 0; i < state->numPlayers; i++){
    #####: 1198:	if (i != currentPlayer){
    #####: 1199:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1200:	  state->discardCount[i]++;
    #####: 1201:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1202:	}
    #####: 1203:      }
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case treasure_map:
        -: 1207:      //search hand for another treasure_map
    #####: 1208:      index = -1;
    #####: 1209:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1210:	{
    #####: 1211:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1212:	    {
    #####: 1213:	      index = i;
    #####: 1214:	      break;
        -: 1215:	    }
    #####: 1216:	}
    #####: 1217:      if (index > -1)
        -: 1218:	{
        -: 1219:	  //trash both treasure cards
    #####: 1220:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1221:	  discardCard(index, currentPlayer, state, 1);
        -: 1222:
        -: 1223:	  //gain 4 Gold cards
    #####: 1224:	  for (i = 0; i < 4; i++)
        -: 1225:	    {
    #####: 1226:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1227:	    }
        -: 1228:				
        -: 1229:	  //return success
    #####: 1230:	  return 1;
        -: 1231:	}
        -: 1232:			
        -: 1233:      //no second treasure_map found in hand
    #####: 1234:      return -1;
        -: 1235:    }
        -: 1236:	
    #####: 1237:  return -1;
    #####: 1238:}
        -: 1239:
        -: 1240:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1241:{
        -: 1242:	
        -: 1243:  //if card is not trashed, added to Played pile 
    #####: 1244:  if (trashFlag < 1)
        -: 1245:    {
        -: 1246:      //add card to played pile
    #####: 1247:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1248:      state->playedCardCount++;
    #####: 1249:    }
        -: 1250:	
        -: 1251:  //set played card to -1
    #####: 1252:  state->hand[currentPlayer][handPos] = -1;
        -: 1253:	
        -: 1254:  //remove card from player's hand
    #####: 1255:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1256:    {
        -: 1257:      //reduce number of cards in hand
    #####: 1258:      state->handCount[currentPlayer]--;
    #####: 1259:    }
    #####: 1260:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1261:    {
        -: 1262:      //reduce number of cards in hand
    #####: 1263:      state->handCount[currentPlayer]--;
    #####: 1264:    }
        -: 1265:  else 	
        -: 1266:    {
        -: 1267:      //replace discarded card with last card in hand
    #####: 1268:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1269:      //set last card to -1
    #####: 1270:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
        -: 1274:	
    #####: 1275:  return 0;
        -: 1276:}
        -: 1277:
        -: 1278:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1279:{
        -: 1280:  //Note: supplyPos is enum of choosen card
        -: 1281:	
        -: 1282:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1283:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1284:    {
    #####: 1285:      return -1;
        -: 1286:    }
        -: 1287:	
        -: 1288:  //added card for [whoseTurn] current player:
        -: 1289:  // toFlag = 0 : add to discard
        -: 1290:  // toFlag = 1 : add to deck
        -: 1291:  // toFlag = 2 : add to hand
        -: 1292:
    #####: 1293:  if (toFlag == 1)
        -: 1294:    {
    #####: 1295:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1296:      state->deckCount[player]++;
    #####: 1297:    }
    #####: 1298:  else if (toFlag == 2)
        -: 1299:    {
    #####: 1300:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1301:      state->handCount[player]++;
    #####: 1302:    }
        -: 1303:  else
        -: 1304:    {
    #####: 1305:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1306:      state->discardCount[player]++;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //decrease number in supply pile
    #####: 1310:  state->supplyCount[supplyPos]--;
        -: 1311:	 
    #####: 1312:  return 0;
    #####: 1313:}
        -: 1314:
        -: 1315:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1316:{
        -: 1317:  int i;
        -: 1318:	
        -: 1319:  //reset coin count
        4: 1320:  state->coins = 0;
        -: 1321:
        -: 1322:  //add coins for each Treasure card in player's hand
       48: 1323:  for (i = 0; i < state->handCount[player]; i++)
        -: 1324:    {
       20: 1325:      if (state->hand[player][i] == copper)
        -: 1326:	{
       15: 1327:	  state->coins += 1;
       15: 1328:	}
        5: 1329:      else if (state->hand[player][i] == silver)
        -: 1330:	{
    #####: 1331:	  state->coins += 2;
    #####: 1332:	}
        5: 1333:      else if (state->hand[player][i] == gold)
        -: 1334:	{
    #####: 1335:	  state->coins += 3;
    #####: 1336:	}	
       20: 1337:    }	
        -: 1338:
        -: 1339:  //add bonus
        4: 1340:  state->coins += bonus;
        -: 1341:
        4: 1342:  return 0;
        -: 1343:}
        -: 1344:
        -: 1345:
        -: 1346://end of dominion.c
        -: 1347:
